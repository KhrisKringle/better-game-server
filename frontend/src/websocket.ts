// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: websocket.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "websocket";

export enum ActionType {
  UNKNOWN = 0,
  LOGIN = 1,
  LOGOUT = 2,
  MOVE = 3,
  UNRECOGNIZED = -1,
}

export function actionTypeFromJSON(object: any): ActionType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ActionType.UNKNOWN;
    case 1:
    case "LOGIN":
      return ActionType.LOGIN;
    case 2:
    case "LOGOUT":
      return ActionType.LOGOUT;
    case 3:
    case "MOVE":
      return ActionType.MOVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActionType.UNRECOGNIZED;
  }
}

export function actionTypeToJSON(object: ActionType): string {
  switch (object) {
    case ActionType.UNKNOWN:
      return "UNKNOWN";
    case ActionType.LOGIN:
      return "LOGIN";
    case ActionType.LOGOUT:
      return "LOGOUT";
    case ActionType.MOVE:
      return "MOVE";
    case ActionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Wrapper for all possible messages */
export interface WebSocketMessage {
  textMessage?: TextMessage | undefined;
  gameInvite?: GameInvite | undefined;
  userAction?: UserAction | undefined;
}

/** Message types */
export interface TextMessage {
  content: string;
}

export interface GameInvite {
  gameId: string;
  inviterId: string;
  inviteeId: string;
}

export interface UserAction {
  userId: string;
  action: ActionType;
}

function createBaseWebSocketMessage(): WebSocketMessage {
  return { textMessage: undefined, gameInvite: undefined, userAction: undefined };
}

export const WebSocketMessage: MessageFns<WebSocketMessage> = {
  encode(message: WebSocketMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.textMessage !== undefined) {
      TextMessage.encode(message.textMessage, writer.uint32(10).fork()).join();
    }
    if (message.gameInvite !== undefined) {
      GameInvite.encode(message.gameInvite, writer.uint32(18).fork()).join();
    }
    if (message.userAction !== undefined) {
      UserAction.encode(message.userAction, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebSocketMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebSocketMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.textMessage = TextMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameInvite = GameInvite.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userAction = UserAction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebSocketMessage {
    return {
      textMessage: isSet(object.textMessage) ? TextMessage.fromJSON(object.textMessage) : undefined,
      gameInvite: isSet(object.gameInvite) ? GameInvite.fromJSON(object.gameInvite) : undefined,
      userAction: isSet(object.userAction) ? UserAction.fromJSON(object.userAction) : undefined,
    };
  },

  toJSON(message: WebSocketMessage): unknown {
    const obj: any = {};
    if (message.textMessage !== undefined) {
      obj.textMessage = TextMessage.toJSON(message.textMessage);
    }
    if (message.gameInvite !== undefined) {
      obj.gameInvite = GameInvite.toJSON(message.gameInvite);
    }
    if (message.userAction !== undefined) {
      obj.userAction = UserAction.toJSON(message.userAction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebSocketMessage>, I>>(base?: I): WebSocketMessage {
    return WebSocketMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebSocketMessage>, I>>(object: I): WebSocketMessage {
    const message = createBaseWebSocketMessage();
    message.textMessage = (object.textMessage !== undefined && object.textMessage !== null)
      ? TextMessage.fromPartial(object.textMessage)
      : undefined;
    message.gameInvite = (object.gameInvite !== undefined && object.gameInvite !== null)
      ? GameInvite.fromPartial(object.gameInvite)
      : undefined;
    message.userAction = (object.userAction !== undefined && object.userAction !== null)
      ? UserAction.fromPartial(object.userAction)
      : undefined;
    return message;
  },
};

function createBaseTextMessage(): TextMessage {
  return { content: "" };
}

export const TextMessage: MessageFns<TextMessage> = {
  encode(message: TextMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== "") {
      writer.uint32(10).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextMessage {
    return { content: isSet(object.content) ? globalThis.String(object.content) : "" };
  },

  toJSON(message: TextMessage): unknown {
    const obj: any = {};
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TextMessage>, I>>(base?: I): TextMessage {
    return TextMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TextMessage>, I>>(object: I): TextMessage {
    const message = createBaseTextMessage();
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseGameInvite(): GameInvite {
  return { gameId: "", inviterId: "", inviteeId: "" };
}

export const GameInvite: MessageFns<GameInvite> = {
  encode(message: GameInvite, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    if (message.inviterId !== "") {
      writer.uint32(18).string(message.inviterId);
    }
    if (message.inviteeId !== "") {
      writer.uint32(26).string(message.inviteeId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameInvite {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameInvite();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inviterId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inviteeId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameInvite {
    return {
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      inviterId: isSet(object.inviterId) ? globalThis.String(object.inviterId) : "",
      inviteeId: isSet(object.inviteeId) ? globalThis.String(object.inviteeId) : "",
    };
  },

  toJSON(message: GameInvite): unknown {
    const obj: any = {};
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.inviterId !== "") {
      obj.inviterId = message.inviterId;
    }
    if (message.inviteeId !== "") {
      obj.inviteeId = message.inviteeId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameInvite>, I>>(base?: I): GameInvite {
    return GameInvite.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameInvite>, I>>(object: I): GameInvite {
    const message = createBaseGameInvite();
    message.gameId = object.gameId ?? "";
    message.inviterId = object.inviterId ?? "";
    message.inviteeId = object.inviteeId ?? "";
    return message;
  },
};

function createBaseUserAction(): UserAction {
  return { userId: "", action: 0 };
}

export const UserAction: MessageFns<UserAction> = {
  encode(message: UserAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.action !== 0) {
      writer.uint32(16).int32(message.action);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserAction {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      action: isSet(object.action) ? actionTypeFromJSON(object.action) : 0,
    };
  },

  toJSON(message: UserAction): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.action !== 0) {
      obj.action = actionTypeToJSON(message.action);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserAction>, I>>(base?: I): UserAction {
    return UserAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserAction>, I>>(object: I): UserAction {
    const message = createBaseUserAction();
    message.userId = object.userId ?? "";
    message.action = object.action ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
